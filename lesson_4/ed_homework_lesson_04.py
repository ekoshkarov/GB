print('###' * 47)
print('###' * 20, 'УРОК №4  ЗАДАНИЕ №1', '###' * 20 )
print('###' * 47)

print(' ')
print('***' * 20, 'Подготовка скрипта', '***' * 20)
print(' ')

# Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

def simple_calc():
    x = float(input('Введите количество отработанных часов : '))
    y = float(input('Введите суммы оплаты труда за 1 час : '))
    z = float(input('Укажите размер премии - '))
    zarp = x * y + z

    return zarp

print(f'Размер полной заработной платы составил: {simple_calc() }')
#
# print(' ')

print('###' * 47)
print('###' * 20, 'УРОК №4  ЗАДАНИЕ №2', '###' * 20 )
print('###' * 47)
print(' ')
print('***' * 20, 'Подготовка скрипта', '***' * 20)
print(' ')

# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

in_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]


res_list = [number for i, number in enumerate(in_list) if i > 0 and in_list[i] > in_list[i - 1]]
print('результат: ', res_list)

print(' ')

print('###' * 47)
print('###' * 20, 'УРОК №4  ЗАДАНИЕ №3', '###' * 20 )
print('###' * 47)

print(' ')
print('***' * 21, '  Генератор  ', '***' * 21)
print(' ')

# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.

list = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]

print("Список чисел кратных 20 или 21 в диапазоне [20..240): ", list)

print(' ')

print('###' * 47)
print('###' * 20, 'УРОК №4  ЗАДАНИЕ №4', '###' * 20 )
print('###' * 47)

print(' ')
print('***' * 21, '  Генератор  ', '***' * 21)
print(' ')

# Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

print("Исходный список чисел:\n", my_list)

new_list = [i for i in my_list if my_list.count(i) == 1]
print("Элементы списка, не имеющие повторений:\n", new_list)

print(' ')

print('###' * 47)
print('###' * 20, 'УРОК №4  ЗАДАНИЕ №5', '###' * 20 )
print('###' * 47)

print(' ')
print('***' * 21, '  Генератор  ', '***' * 21)
print(' ')

# Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.


from functools import reduce

list = [i for i in range(100, 1001, 2)]
print("Список чётных чисел в диапазоне [100..1000]:\n", list)
print("Произведение всех элементов списка:\n", reduce(lambda x,y: x*y, list))

print(' ')

print('###' * 47)
print('###' * 20, 'УРОК №4  ЗАДАНИЕ №6', '###' * 20 )
print('###' * 47)

print(' ')
print('***' * 21, '   Итераторы  ', '***' * 21)
print(' ')

#####
from itertools import count

print("<<Бесконечный итератор целых чисел, начиная с указанного>>")
n = int(input("Введите целое число:"))

for i in count(n):
    print(i, end=' ')

# ######

from itertools import cycle

list = [5, 3, 3, 1, 0, 4, 2, 4, 7, 3]
for i in cycle(list):
    print(i, end=' ')

########

print(' ')

print('###' * 47)
print('###' * 20, 'УРОК №4  ЗАДАНИЕ №7', '###' * 20 )
print('###' * 47)

print(' ')
print('***' * 21, '   Генератор   ', '***' * 21)
print(' ')

# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.


from math import factorial

def factorial_gen(n):
    for i in range(n):
        print(i, end='! = ')
        yield factorial(i)

print("<<Программа вычисления факториала числа>>")
for el in factorial_gen(15):
    print(el)


